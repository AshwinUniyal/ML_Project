{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3hLTJ85sdMK2"
      },
      "source": [
        "# Access to the files\n",
        "\n",
        "The files are available from:\n",
        "Train: http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/train_x.npy http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/train_y.npy \n",
        "\n",
        "Validate: http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/valid_x.npy http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/valid_y.npy\n",
        "\n",
        "Test: http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/test_x.npy http://homepages.cs.ncl.ac.uk/stephen.mcgough/data/CIFARTile/test_y.npy\n",
        "\n",
        "You can upload the files each time you use them, but this might take some time as they are quite large. An eisier option is to uploade them to a Google drive folder and mount this.\n",
        "\n",
        "Full information on how to do this can be found at: https://colab.research.google.com/notebooks/io.ipynb \n",
        "\n",
        "In the code below I have created a folder in Google drive called data/CIFARTile and placed all the files above in it."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sc4AJyBjtHcN",
        "outputId": "6deed51d-de9b-4936-caf9-6ecdc7ac1765"
      },
      "source": [
        "# to access google drive folder\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive') # When you run this you'll be prompted for a token - follow the link to generate this."
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gVYc_AoBeMDR"
      },
      "source": [
        "# Load the data\n",
        "\n",
        "The data is stored in mumpy data files. You can use numpy.load() to read these in.\n",
        "\n",
        "**Note: you'll need to change the location of the file to wherever you stroed your files.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "50jMPuN3tSyO"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "train_X = np.load(\"/content/drive/MyDrive/data/CIFARTile/train_x.npy\", allow_pickle=True)"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o6AUUCiGtWM7"
      },
      "source": [
        "train_y = np.load(\"/content/drive/MyDrive/data/CIFARTile/train_y.npy\", allow_pickle=True)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7rYykZHO89qJ"
      },
      "source": [
        "validate_X = np.load(\"/content/drive/MyDrive/data/CIFARTile/valid_x.npy\", allow_pickle=True)"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Epod6k5h9FNu"
      },
      "source": [
        "validate_y = np.load(\"/content/drive/MyDrive/data/CIFARTile/valid_y.npy\", allow_pickle=True)"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8KuZQCe-9s3R"
      },
      "source": [
        "test_X = np.load(\"/content/drive/MyDrive/data/CIFARTile/test_x.npy\", allow_pickle=True)"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "01hcEICvL9BN"
      },
      "source": [
        "test_y = np.load(\"/content/drive/MyDrive/data/CIFARTile/test_y.npy\", allow_pickle=True)"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pjqB25NKejWy"
      },
      "source": [
        "# Check the shape of the data\n",
        "\n",
        "You can do this for all data files"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_qZpYDm79z1u",
        "outputId": "85b1adaa-b839-4f29-8cfe-4b54584c84bd"
      },
      "source": [
        "test_X.shape"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(10000, 3, 64, 64)"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wb4TzzqIjI8l",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f23bb474-5aa0-47e7-8fc4-94d32b36ffaa"
      },
      "source": [
        "validate_X.shape"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(15000, 3, 64, 64)"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W01-sYvre4vV"
      },
      "source": [
        "# Set up some functions to plot the data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rlxVj5IByVTB"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def image_normalization(arr):\n",
        "    return (arr - arr.min())/(arr.max()-arr.min())\n",
        "\n",
        "def disable_ax_ticks(ax):\n",
        "    ax.set_xticks([])\n",
        "    ax.set_xticks([], minor=True)\n",
        "    ax.set_yticks([])\n",
        "    ax.set_yticks([], minor=True)\n",
        "\n",
        "def show_example(x, y):\n",
        "    fig = plt.figure()\n",
        "    main_ax = fig.add_subplot()\n",
        "    fig.suptitle('label = '+ str(y))\n",
        "    main_ax.imshow(image_normalization(np.moveaxis(x, 0, -1)))\n",
        "    disable_ax_ticks(main_ax)\n",
        "\n",
        "    plt.show()"
      ],
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "idwDwTkbfBdR"
      },
      "source": [
        "# Pick a random example and plot it"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sBJvBSn46ERt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "outputId": "e4cfa16b-ed37-43ed-dabe-eb2837dffb46"
      },
      "source": [
        "import random\n",
        "\n",
        "count = train_X.shape[0]\n",
        "\n",
        "ri = random.randrange(count)\n",
        "show_example(train_X[ri], train_y[ri])"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
